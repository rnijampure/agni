{"version":3,"sources":["innerPages/GreenCluster/createGreenClustersDialog.js","innerPages/GreenCluster/greenClusterList.js","innerPages/GreenCluster/greenClusterListSmallSCreen.js","innerPages/GreenCluster/greenClusterListMain.js"],"names":["useStyles","makeStyles","theme","body","backgroundColor","palette","common","white","closeButton","position","right","spacing","top","color","grey","Dialog","maxWidth","paper","marginTop","display","flexDirection","alignItems","textAlign","flexWrap","avatar","margin","secondary","main","form","width","submit","button","DialogContent","DialogTitle","withStyles","props","classes","children","onClose","other","disableTypography","className","root","variant","aria-label","onClick","withRouter","React","useState","open","setOpen","useTheme","fullScreen","useMediaQuery","breakpoints","down","handleClose","history","useHistory","aria-labelledby","id","initialValues","greenclusterNumber","Locality","onSubmit","values","setSubmitting","alert","JSON","stringify","setTimeout","push","validationSchema","Yup","shape","required","handleChange","handleBlur","handleSubmit","component","noValidate","validateOnBlur","validateOnChange","name","render","field","error","Boolean","errors","touched","fullWidth","label","autoComplete","autoFocus","onChange","onBlur","helperText","String","area","kasaragod","state","type","mdUp","whiteSpace","rootOne","background","fontSize","boxShadow","padding","ListItem","paddingTop","heightOne","height","gridParent","flexGrow","marginBottom","border","headingText","topPaper","text","alignLeft","WrappedListItem","flex","flexWrapParent","fontWeight","maxWidth150","WrappedListItemTop","GCListlargeScreen","Fragment","Grid","container","item","xs","sm","Paper","join","List","ListItemText","primary","Divider","orientation","Button","paddingBottom","paddingLeft","marginLeft","GCSmallScreen","GCListMain","window","innerWidth","Component"],"mappings":"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","file":"static/js/11.e3e1669d.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent'; \r\nimport { withRouter } from 'react-router-dom'\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Formik, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport CssBaseline from '@material-ui/core/CssBaseline'; \r\n\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  '@global': {\r\n    body: {\r\n      backgroundColor: theme.palette.common.white,\r\n    },\r\n  }, \r\n   closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n  Dialog: {\r\n    maxWidth: '800px'\r\n  },\r\n  paper: {\r\n    marginTop: 0,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n    flexWrap: 'wrap'\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 5), width: '100%',\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1, 0, 5),\r\n    width: '100%',\r\n  },\r\n  DialogContent: {\r\n    flexWrap: 'wrap'\r\n  }\r\n}));\r\n\r\nconst DialogTitle = withStyles(makeStyles)(props => {\r\n\r\n  let classes = useStyles();\r\n  const { children, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nfunction FormDialog() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n\r\n\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n\r\n  };\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  return (\r\n    <div>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleClickOpen}>\r\n        CREATE GREEN CLUSTER\r\n      </Button>\r\n\r\n\r\n\r\n\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullScreen={fullScreen}\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\" onClose={handleClose}>Create Green Cluster</DialogTitle>\r\n        <Divider />\r\n        <DialogContent>\r\n\r\n\r\n\r\n\r\n          <Formik\r\n            initialValues={{\r\n              greenclusterNumber: '',\r\n              Locality: '',\r\n\r\n            }}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n              alert(JSON.stringify(values, null, 2));\r\n              setTimeout(() => {\r\n                setOpen(false);\r\n                history.push(\"/dashboard/GreenClusters/\")\r\n\r\n\r\n\r\n                //  setSubmitting(false);\r\n              }, 500);\r\n            }}\r\n\r\n            validationSchema={Yup.object().shape({\r\n              greenclusterNumber: Yup.string()\r\n                .required('Please provide a greencluster number'),\r\n                Locality :  Yup.string()\r\n                .required('Locaity is Mandatory!')\r\n            })}\r\n          >\r\n\r\n            {props => {\r\n              const {\r\n\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit,\r\n              } = props;\r\n              return (\r\n\r\n                <Container component=\"main\" maxWidth=\"xs\">\r\n                  <CssBaseline />\r\n                  <div className={classes.paper}>\r\n\r\n                    <form className={classes.form} noValidate onSubmit={handleSubmit} >\r\n                      <Field\r\n                        validateOnBlur\r\n                        validateOnChange\r\n                        name=\"greenclusterNumber\"\r\n                        render={({ field, form }) => (\r\n\r\n                          <TextField\r\n                            error={\r\n                              Boolean(form.errors.greenclusterNumber && form.touched.greenclusterNumber)\r\n                            }\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"greenclusterNumber\"\r\n                            label=\"Create Green Cluster Number\"\r\n                            name=\"greenclusterNumber\"\r\n                            autoComplete=\"greenclusterNumber\"\r\n                            autoFocus\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            helperText={\r\n                              form.errors.greenclusterNumber &&\r\n                              form.touched.greenclusterNumber &&\r\n                              String(form.errors.greenclusterNumber)\r\n                            }\r\n                          />\r\n                        )}\r\n                      />\r\n\r\n                      <Field\r\n                        validateOnBlur\r\n                        validateOnChange\r\n                        name=\"Locality\"\r\n                        render={({ field, form }) => (\r\n                          <TextField\r\n                            error={\r\n                              Boolean(form.errors.Locality && form.touched.Locality)\r\n                            }\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"Locality\"\r\n                            label=\"Locality\"\r\n                            id=\"Locality\"\r\n                            autoComplete=\"current-Locality\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            helperText={\r\n                              form.errors.Locality &&\r\n                              form.touched.Locality &&\r\n                              String(form.errors.Locality)\r\n                            }\r\n                          />\r\n                        )}\r\n                      />\r\n\r\n                      <Field\r\n                        validateOnBlur\r\n                        validateOnChange\r\n                        name=\"Area\"\r\n                        render={({ field, form }) => (\r\n                          <TextField\r\n                            error={\r\n                              Boolean(form.errors.area && form.touched.area)\r\n                            }\r\n                            margin=\"normal\" \r\n                            fullWidth\r\n                            name=\"Area\"\r\n                            label=\"Area\"\r\n                            id=\"Area\"\r\n                            autoComplete=\"current-area\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            helperText={\r\n                              form.errors.area &&\r\n                              form.touched.area &&\r\n                              String(form.errors.area)\r\n                            }\r\n                          />\r\n                        )}\r\n                      />\r\n\r\n                      <Field\r\n                        validateOnBlur\r\n                        validateOnChange\r\n                        name=\"Kasaragod\"\r\n                        render={({ field, form }) => (\r\n                          <TextField\r\n                            error={\r\n                              Boolean(form.errors.area && form.touched.area)\r\n                            }\r\n                            margin=\"normal\" \r\n                            fullWidth\r\n                            name=\"Kasaragod\"\r\n                            label=\"Kasaragod\"\r\n                            id=\"Kasaragod\"\r\n                            autoComplete=\"current-kasaragod\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            helperText={\r\n                              form.errors.kasaragod &&\r\n                              form.touched.kasaragod &&\r\n                              String(form.errors.kasaragod)\r\n                            }\r\n                          />\r\n                        )}\r\n                      />\r\n                      <Field\r\n                        validateOnBlur\r\n                        validateOnChange\r\n                        name=\"State\"\r\n                        render={({ field, form }) => (\r\n                          <TextField\r\n                            error={\r\n                              Boolean(form.errors.area && form.touched.area)\r\n                            }\r\n                            margin=\"normal\" \r\n                            fullWidth\r\n                            name=\"State\"\r\n                            label=\"State\"\r\n                            id=\"State\"\r\n                            autoComplete=\"current-state\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            helperText={\r\n                              form.errors.state &&\r\n                              form.touched.state &&\r\n                              String(form.errors.state)\r\n                            }\r\n                          />\r\n                        )}\r\n                      />\r\n\r\n\r\n                      <DialogActions>\r\n\r\n                        <Button\r\n                          type=\"submit\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          className={classes.submit}\r\n                        >\r\n                          CREATE\r\n     </Button>\r\n                        <Hidden mdUp>\r\n                          <Button\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            className={classes.button}\r\n                            onClick={handleClose}\r\n                          >\r\n                            CANCEL\r\n     </Button>\r\n                        </Hidden>\r\n                      </DialogActions>   </form>\r\n                  </div>\r\n                </Container>\r\n              );\r\n            }}\r\n\r\n          </Formik>\r\n        </DialogContent>\r\n\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(FormDialog)","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Paper } from '@material-ui/core';\r\nimport   FormDialog from './createGreenClustersDialog'\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: '100%',\r\n    backgroundColor:' ',\r\n    display: 'flex',\r\n    \"&:hover\": {\r\n      //you want this to be the same as the backgroundColor above display:'inline-block',\r\n      backgroundColor: \"none\"\r\n    },\r\n    \r\n\r\n  },\r\n  button:{ \r\n    whiteSpace : 'nowrap',\r\n    \"& span\" : {\r\n      whiteSpace : 'nowrap',\r\n    },\r\n   \r\n},\r\n  rootOne: {\r\n    width: '100%',\r\n    maxWidth: '100%',\r\n    background: 'none',\r\n    display: 'flex',\r\n    color: '#868686',\r\n     fontSize:'12px!important',\r\n    \"&:hover\": {\r\n      //you want this to be the same as the backgroundColor above display:'inline-block',\r\n      backgroundColor: \"none\"\r\n    },\r\n    boxShadow: 'none',\r\n    padding: '0',\r\n\r\n  },\r\n  paper: {\r\n    width: '100%'\r\n  },\r\n  ListItem: {\r\n    flexWrap: 'wrap',\r\n    \"&:hover\": {\r\n      //you want this to be the same as the backgroundColor above\r\n      backgroundColor: \"none\"\r\n    },\r\n    paddingTop: '0'\r\n  },\r\n  heightOne: {\r\n    height: '1px'\r\n  }\r\n  ,\r\n  '& hr': {\r\n    margin: theme.spacing(0, 0.5),\r\n  },\r\n  gridParent: {\r\n    flexGrow: '1 1',\r\n    marginBottom: '20px',\r\n    border:'none',\r\n    boxShadow:'none',\r\n    width:'100%'\r\n  },\r\n  headingText:{\r\n    fontSize:'12px',\r\n  },\r\n   topPaper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'right',\r\n    color: theme.palette.text.secondary,\r\n    boxShadow:'none',\r\n    background:'none'\r\n  },\r\n  alignLeft:{\r\n    textAlign:'left',\r\n       boxShadow:'none'\r\n  },\r\n  WrappedListItem:{\r\n    flex: '0 0 53%'\r\n  },\r\n  flexWrapParent:{\r\n\r\n    flexWrap: 'wrap',    \"& :first-of-type \":{\r\n    \"& span\":{ \r\n      fontWeight:'700', \r\n   \r\n    }\r\n  }\r\n  },\r\n  maxWidth150:{\r\n    maxWidth:'150px'\r\n  },\r\n  WrappedListItemTop:{\r\n    fontWeight:'700',\r\n     flex: '0 0 53%'\r\n  }\r\n}));\r\n\r\nexport default function GCListlargeScreen() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.gridParent}>\r\n        <Grid container spacing={3}>\r\n\r\n          <Grid item xs={12} sm={6}>\r\n            <Paper className={[classes.alignLeft ,classes.topPaper].join( ' ')}>\r\n    <h1 className=\"{ main_heading-text }\">     Request</h1> </Paper>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Paper className={classes.topPaper}>\r\n            <FormDialog/></Paper>\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </div>\r\n      <Paper className={classes.rootOne}>\r\n        <List component=\"nav\" className={classes.rootOne} aria-label=\"mailbox folders\">\r\n          <ListItem   className={classes.maxWidth150}  variant=\"raised\">\r\n            <ListItemText className={classes.headingText} primary=\"Green Cluster\" />\r\n          </ListItem>\r\n          <ListItem    variant=\"raised\">\r\n            <ListItemText className={classes.headingText} primary=\" \" />\r\n          </ListItem>\r\n          <ListItem     variant=\"raised\">\r\n            <ListItemText className={classes.headingText}  primary=\"Total Request\" />\r\n          </ListItem>\r\n          <ListItem   variant=\"raised\">\r\n            <ListItemText className={classes.headingText} primary=\"Feed Team\" />\r\n          </ListItem>\r\n\r\n          <ListItem   variant=\"raised\">\r\n            <ListItemText className={classes.headingText} primary=\"Driver\" />\r\n          </ListItem>\r\n          <ListItem   variant=\"raised\">\r\n\r\n            <ListItemText className={classes.headingText} primary=\"Total Points\" />\r\n          </ListItem>\r\n        </List>\r\n      </Paper>\r\n    \r\n      <Paper className={classes.root}>\r\n        <List component=\"nav\" className={classes.root} aria-label=\"mailbox folders\">\r\n        <ListItem   className={classes.maxWidth150}>\r\n            <ListItemText primary=\"01\" />\r\n\r\n            <Divider orientation=\"vertical\" /> \r\n          </ListItem>\r\n          <ListItem   className={classes.flexWrapParent} > \r\n\r\n            <ListItemText primary=\"Indranagar\"  className={classes.WrappedListItemTop} />\r\n            <ListItemText primary=\"1st Block\"  className={classes.WrappedListItem} />\r\n          </ListItem>\r\n\r\n          <ListItem  >\r\n            <ListItemText primary=\"0\" />\r\n          </ListItem>\r\n          <ListItem  >\r\n            <Button variant=\"contained\" color=\"primary\" className={classes.button}>\r\n              ASSIGN TEAM\r\n      </Button>\r\n          </ListItem>\r\n          <ListItem  >\r\n            <Button variant=\"contained\" color=\"primary\" className={classes.button}>\r\n              ASSIGN DRIVER\r\n      </Button>\r\n          </ListItem>\r\n          <ListItem  >\r\n\r\n            <ListItemText primary=\"0\" />\r\n          </ListItem>\r\n        </List>\r\n\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport Grid from '@material-ui/core/Grid'; \r\n \r\nimport Button from '@material-ui/core/Button';\r\nimport { Paper } from '@material-ui/core';\r\nimport   FormDialog from './createGreenClustersDialog'\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: '100%',\r\n    backgroundColor: theme.palette.background.paper,\r\n   \r\n  },\r\n  gridParent:{\r\n    \"& paper:\":{\r\nbackgroundColor:'none',\r\n      \r\n    },\r\n    \"& h1.main_heading-text\":{\r\n        paddingBottom: '0px',\r\n        paddingLeft: '0px'\r\n      }\r\n      \r\n  },\r\n  rootOne: {\r\n    width: '100%',\r\n    maxWidth: '100%', \r\n    boxShadow:'none',\r\n    \r\n    display:'inline-block',\r\n    padding:'0'\r\n  },\r\n  paper:{\r\n      width:'50%',\r\n      display:'inline-block'\r\n  } ,\r\n  button:{\r\n  \r\n    \"&:hover\": {\r\n        //you want this to be the same as the backgroundColor above\r\n        backgroundColor: \"none\"\r\n    } \r\n  },\r\n  heightOne:{\r\n      height:'1px'\r\n  },\r\n  \r\n  alignLeft:{\r\n    textAlign:'left',\r\n       boxShadow:'none',\r\n       backgroundColor: 'transparent'\r\n  },\r\n  topPaper:{\r\n backgroundColor: 'transparent',\r\n \r\n boxShadow:'none',\r\n backgroundColor: 'transparent',\r\n\r\n \"& button\":{\r\n  \r\n  [theme.breakpoints.down('sm')]: {\r\n    width: '100%', margin: '10px',    marginLeft: '0px' ,    marginBottom: '30px',\r\n  },\r\n }\r\n \r\n  },\r\n  WrappedListItem:{\r\n    flex: '0 0 53%'\r\n  },\r\n  flexWrapParent:{\r\n\r\n    flexWrap: 'wrap',    \"& :first-of-type \":{\r\n    \"& span\":{ \r\n      fontWeight:'700', \r\n   \r\n    }\r\n  }\r\n  },\r\n  maxWidth150:{\r\n    maxWidth:'150px'\r\n  },\r\n  WrappedListItemTop:{\r\n    fontWeight:'700',\r\n     flex: '0 0 53%'\r\n  } \r\n}));\r\n\r\nexport default function GCSmallScreen() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n\r\n    <React.Fragment>\r\n      <div className={classes.gridParent}>\r\n        <Grid container spacing={3}>\r\n\r\n          <Grid item xs={12} sm={6}>\r\n            <Paper className={classes.alignLeft }>\r\n    <h1 className=\"{ main_heading-text }\">     Request</h1></Paper>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Paper className={classes.topPaper}>\r\n            <FormDialog/></Paper>\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </div>\r\n      <Paper className={classes.rootOne}>\r\n        <List component=\"nav\" className={classes.rootOne} aria-label=\"mailbox folders\">\r\n          <ListItem  variant=\"raised\">\r\n            <ListItemText className={classes.maxWidth150} primary=\"Green Cluster Id:\" />\r\n            <ListItemText className={classes.headingText} primary=\"01\" />\r\n        \r\n          </ListItem>\r\n  <ListItem   > \r\n  <ListItemText className={classes.maxWidth150} primary=\"Location\" />\r\n  <div className={classes.flexWrapParent}>\r\n<ListItemText primary=\"Indranagar\"  className={classes.WrappedListItemTop} />\r\n<ListItemText primary=\"1st Block\"  className={classes.WrappedListItem} />\r\n</div>\r\n</ListItem>\r\n          <ListItem     variant=\"raised\">\r\n            <ListItemText className={classes.maxWidth150}  primary=\"Total Request\" />\r\n            <ListItemText className={classes.headingText}  primary=\"Total Request\" />\r\n          </ListItem>\r\n          <ListItem   variant=\"raised\">\r\n            <ListItemText className={classes.maxWidth150} primary=\"Feed Team\" />\r\n            <Button variant=\"contained\" color=\"primary\" className={classes.button}>\r\n              ASSIGN DRIVER\r\n      </Button>\r\n          </ListItem>\r\n\r\n          <ListItem   variant=\"raised\">\r\n            <ListItemText className={classes.maxWidth150} primary=\"Driver\" />\r\n            <Button variant=\"contained\" color=\"primary\" className={classes.button}>\r\n              ASSIGN DRIVER\r\n      </Button>\r\n          </ListItem>\r\n          <ListItem   variant=\"raised\">\r\n\r\n            <ListItemText className={classes.maxWidth150} primary=\"Total Points\" />\r\n            <ListItemText primary=\"0\" />\r\n          </ListItem>\r\n        </List>\r\n      </Paper>\r\n    \r\n\r\n    </React.Fragment>\r\n   );\r\n}\r\n","import React, { Component }  from 'react'; \r\nimport GCListlargeScreen from './greenClusterList'\r\nimport GCSmallScreen from './greenClusterListSmallSCreen'\r\n\r\nexport default class GCListMain extends Component  {\r\n  render() {\r\n        let width = window.innerWidth;  \r\n    if (width > 768) {\r\n      return (\r\n       <GCListlargeScreen></GCListlargeScreen>\r\n       \r\n       );\r\n    } else {\r\n      return ( \r\n    <GCSmallScreen></GCSmallScreen>\r\n      );\r\n    }\r\n }\r\n \r\n}\r\n"],"sourceRoot":""}